name: Build, Test, and Deploy to EC2

on:
  push:
    branches:
      - main
      - dev
      - 'releases/**'

permissions:
  id-token: write
  contents: read

jobs:
  # -------------------------
  # Job 1: Build and test
  # -------------------------
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v3.9.1
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Run Tests
        run: npm test

      - name: Create deployment package
        run: |
          mkdir deploy-package
          cp -R dist deploy-package/
          cp -R migrations deploy-package/
          cp knexfile.js deploy-package/
          cp package.json deploy-package/
          cp package-lock.json deploy-package/

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: deployment-package
          path: deploy-package

  # -------------------------
  # Job 2: Deploy to EC2
  # -------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    environment:
      name: ${{ (github.ref == 'refs/heads/main' && 'prod') || (startsWith(github.ref, 'refs/heads/release/') && 'test') || 'dev' }}
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: deployment-package
          path: deploy-package

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SOURCE: "deploy-package/"
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER: ${{ secrets.EC2_USER }}
          TARGET: /home/ec2-user/my-ts-app
          ARGS: "-rltgoDzv --delete"

      - name: Run post-deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status

            # Detect environment
            if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
              ENV_NAME="prod"
            elif [[ "${GITHUB_REF}" == refs/heads/releases/* ]]; then
              ENV_NAME="test"
            else
              ENV_NAME="dev"
            fi

            APP_DIR="/home/ec2-user/my-ts-app-$ENV_NAME"
            echo "Deploying to $APP_DIR..."
            
            mkdir -p $APP_DIR
            rsync -a --delete /home/ec2-user/my-ts-app/ $APP_DIR/

            cd $APP_DIR

            echo "${{ vars.ENV_FILE_CONTENT }}" > .env

            npm install --omit=dev --no-audit --no-fund

            npx knex migrate:latest

            pm2 startOrRestart ecosystem.config.js --only app-$ENV_NAME || \
              pm2 start dist/app.js --name "app-$ENV_NAME"

            pm2 save
